<script lang="ts">
	import {
	getColumnSettings,
	getColValueExample,
	getDataExample,
	getTableSettings,
	themeCSSVariables
	} from '$lib/codeExamples/readme';
	import { active } from '$lib/stores/activeContent';
	import { onMount,tick } from 'svelte';
	import Highlight,{ HighlightSvelte } from 'svelte-highlight';
	import css from 'svelte-highlight/languages/css';
	import shell from 'svelte-highlight/languages/shell';
	import typescript from 'svelte-highlight/languages/typescript';
	import irBlack from 'svelte-highlight/styles/ir-black';
	import GoAlert from 'svelte-icons/go/GoAlert.svelte'
  
  onMount(async () => {
    await tick();
    $active = 'docs';
  })
</script>

<svelte:head>
	{@html irBlack}
	<title>svelte-simple-tables</title>
</svelte:head>

<h1>svelte-simple-tables</h1>

<p class="badges">
	<img src="https://badgen.net/npm/v/@a-luna/svelte-simple-tables" alt="npm version" class="s-oaoYwmN5ZRlK">
	<img src="https://badgen.net/npm/types/@a-luna/svelte-simple-tables" alt="npm types included" class="s-oaoYwmN5ZRlK">
	<img src="https://badgen.net/github/license/a-luna/svelte-simple-tables" alt="gh license" class="s-oaoYwmN5ZRlK">
	<img src="https://img.shields.io/npm/dm/@a-luna/svelte-simple-tables" alt="npm dl count" class="s-oaoYwmN5ZRlK">
	<a href="https://codecov.io/gh/a-luna/svelte-simple-tables" rel="nofollow" class="s-oaoYwmN5ZRlK"><img src="https://codecov.io/gh/a-luna/svelte-simple-tables/branch/main/graph/badge.svg?token=N7XKOHAKNC" alt="codecov" class="s-oaoYwmN5ZRlK"></a>
</p>

<ul class="toc">
	<li><a href="#features">Features</a></li>
	<li><a href="#examples">Examples</a></li>
	<li><a href="#installation">Installation</a></li>
	<li>
		<a href="#usage">Usage</a>
		<ul>
			<li><a href="#data"><code>data</code></a></li>
			<li><a href="#columnSettings"><code>columnSettings</code></a></li>
			<li><a href="#tableSettings"><code>tableSettings</code></a></li>
		</ul>
	</li>
	<li>
		<a href="#themes">Themes</a>
		<ul>
			<li><a href="#css-custom-properties">CSS Custom Properties</a></li>
		</ul>
	</li>
</ul>
  
<h2 id="features">Features</h2>

- **Create sortable, paginated tables** that
  follow [WAI-ARIA guidelines](https://www.w3.org/TR/wai-aria-practices-1.1/examples/table/table.html).
- **Columns dynamically resize** to accommodate all visible content.
- **Automatically responsive.** Tables become horizontally scrollable without breaking page layout.
- **Four color themes provided**. Users can adjust every detail of existing themes or create new themes with CSS custom properties.

<div class="flex-header flex flex-row">
	<h2 id="examples"><span class="emoji">ü•≥</span>Examples</h2>
</div>

<ul class="examples">
	<li><a sveltekit:prefetch href="/basic">Example 1: Simple Data Set</a></li>
	<li><a sveltekit:prefetch href="/complex">Example 2: Larger, Complex Data Set</a></li>
	<li><span class="coming-soon">Coming Soon: CSS Theme Editor</span></li>
</ul>

<h2 id="installation">Installation</h2>

**yarn**
<Highlight language={shell} code={'yarn add -D @a-luna/svelte-simple-tables'} />

**npm**
<Highlight language={shell} code={'npm install -D @a-luna/svelte-simple-tables'} />

**pnpm**
<Highlight language={shell} code={'pnpm install -D @a-luna/svelte-simple-tables'} />

<h2 id="usage">Usage</h2>

<HighlightSvelte code={getTableSettings()} />

`SimpleTable` expects three props: `data`, `columnSettings`, and `tableSettings`:

| Name             | Type                  | Description                                                                                                                                                                        |
| ---------------- | --------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `data`           | `T[]`                 | Array of `T`¬†objects (`T`¬†is a generic type) . Each object will be rendered as a row in the table.                                                                                 |
| `columnSettings` | `ColumnSettings&lt;T&gt;[]` | Array of `ColumnSettings&lt;T&gt;` objects (`T` is the same generic type from `data`). You must define a `ColumnSettings&lt;T&gt;` object for every column your table contains. Each `ColumnSettings&lt;T&gt;` object specifies the value to display in the column for each row, the value to show in the column header, etc. |
| `tableSettings`  | `TableSettings&lt;T&gt;`       | Configuration object for sizing, layout, pagination, and other overall table settings (Again, `T` is the same generic type from `data`).                                                                                             |

<blockquote>
	<span
		class="emoji"
		title="kindly stuff your gripes of 'types are overhyped' inside a pipe. wipe your tear-stripes, their time is ripe"
		>üò®</span
	><strong>BUT I DON'T WANT TO USE TYPES</strong> Why is it necessary to specify the type of the items
	in the <code>data</code> array? <code>SimpleTable</code> uses <a href="https://github.com/dummdidumm/rfcs/blob/ts-typedefs-within-svelte-components/text/ts-typing-props-slots-events.md">an experimental svelte feature</a>
	that makes it possible to use generic types with component props. This enables advanced error-checking
	and autocompletion in your IDE.
</blockquote>

<h3 id="data"><code>data</code></h3>

The `data` for your table will typically be provided from a response to an API request or database query. In this example, `data` is imported from a typescript file (`data.ts`) that exports a list of `VaxData` objects:

<Highlight language={typescript} code={getDataExample()} />

<h3 id="columnSettings"><code>columnSettings</code></h3>

After you have the `data` that you wish to display in a table, the next step is to determine which `VaxData` properties (`name`, `age`, etc.) should be displayed in each column. This is accomplished with the `columnSettings` prop, which is a list of `ColumnSettings&lt;T&gt;` objects. The API for `ColumnSettings&lt;T&gt;` is given below:

| Property     | Type                 | Required | Default                                                                                                                                                                                                                  | Description                                                                                                                                                                                                                                        |
| ------------ | -------------------- | -------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `propName`   | `keyof T`             | ‚úÖ       | N/A                                                                                                                                                                                                                      | The name of the property to display (value must be the name of a property on type `T`)                                                                                                                                                                                                                |
| `headerText` | `string`             | ‚ùå       | If the value provided for `propName` is in `snake_case` or `camelCase` format, it is converted to `Snake Case` or `Camel Case`, respectively. Otherwise, the value provided for `propName` is used as the default value. | The text displayed in the column header.                                                                                                                                                                                                           |
| `tooltip`    | `string`             | ‚ùå       | Same behavior as `headerText`                                                                                                                                                                                            | Tooltip value to display when mouse hovers over the column header.                                                                                                                                                                                 |
| `sortable`   | `boolean`            | ‚ùå       | `true`                                                                                                                                                                                                                   | If `sortable=True`, clicking the column header will re-sort the table using that value. Clicking the same column header again will toggle between ascending/descending order. If `sortable=False`, clicking the column header will have no effect. |
| `classList`  | `string[]`           | ‚ùå       | `[]`                                                                                                                                                                                                                     | A list of strings where each string will be added to the `classList` of each data cell in this column. Useful for utility classes such as Tailwind to control text-alignment, font-weight, etc.                                                    |
| `colValue`   | `(obj: T) =&gt; string` | ‚ùå       | `(obj: T) =&gt; obj.propName`<br/><br/>__What does this do?__ The default behavior is to display the value of `obj.propName` without any further processing or formatting                                                                                                                                             | A function that accepts an object from `data` and returns the value that should be displayed in this column. This allows you to customize the way the data is displayed in any way.                                                                |

<blockquote class="important">
	<span class="emoji">üö®</span><strong>AS OF VERSION 0.0.26</strong> <code>propType</code> is no longer a property of <code>ColumnSettings&lt;T&gt;</code>. It is no longer necessary to define the type of each value to display as a column, this is automatically inferred for you.
</blockquote>

For each column, the only required value is `propName` (all other properties have sane default values). Determining the value to use for `colValue` (other than the default) will be necessary quite often, since this controls the value that a column displays for each object.

Let's take a look at an example that renders a column for each `VaxData` property:

<Highlight language={typescript} code={getColumnSettings()} />

These five `ColumnSettings&lt;VaxData&gt;` objects would generate a table similar to the one below:

| Name                  | Birthdate       | Age | Vax? | ID  |
| --------------------- | --------------- | --- | ---- | --- |
| [Alice](/person/1)    | Thu Aug 12 2010 | 11  | ‚úÖ   | 1   |
| ...                   | ...             | ... | ...  | ... |
| [Ulysses](/person/21) | Thu Mar 12 1936 | 85  | ‚úÖ   | 21  |

All of the explanations that follow refer to this table and the `ColumnSettings&lt;VaxData&gt;` objects defined above.

<h4 id="colvalue-1">Example #1: Custom HTML</h4>

The first column is configured to display the `name` property of each object as a link to a hypothetical page. Since `colValue` is a function which accepts a single `VaxData` object and returns a string, we can easily construct an anchor element that incorporates properties of the `VaxData` object:

<Highlight language={typescript} code={getColValueExample()} />

This string will be rendered using the special `@html` tag available in svelte, resulting in a clickable link as shown in the table above.

<h4 id="colvalue-2">Example #2: <code>Date</code> value</h4>

The `birthdate` property is a `Date` value. If the default value for `colValue` is used, it would be displayed by simply calling the `Date.toString()` method (e.g., `Thu Aug 12 2010 00:00:00 GMT-0700 (Pacific Daylight Time)`). By simply configuring `colValue` to instead call the `Date.toDateString()` method, the column will omit the time and time-zone information, displaying just the date portion (`Thu Aug 12 2010`):

<Highlight
language={typescript}
code={'colValue: (data: VaxData): string => data.birthdate.toDateString()'}
/>
<br/>
<h4 id="colvalue-3">Example #3: <code>Number</code> value</h4>

The __Age__ column is a good example of when the default behavior produces a result that doesn't require any further changes. The `age` property is a number, which will be rendered as a string eventually. Therefore, there is no need to customize `colValue` for this property.

<h4 id="colvalue-4">Example #4: <code>Boolean</code> value</h4>

The column for `vaccinated` contains `boolean` values, which by default will simply display `'true'`/`'false'` strings. The easiest way to display something more interesting is with a ternary operator:

<Highlight
language={typescript}
code={"colValue: (data: VaxData): string => (data.vaccinated ? '‚úÖ' : '‚ùå')"}
/>

This column also takes advantage of the `classList` property. In Tailwind CSS, `text-center` is a utility class that sets `text-align: center` on a HTML element. This would add the `text-center` class to each data cell in this column.

<h4 id="colvalue-5">Example #5: Making a Column Unsortable</h4>

Finally, the last column displays the `personId` property. The `sortable` property is set to `false`, making this the only column that cannot be sorted by clicking on the column header.

<blockquote>
	<span class="emoji" title="average temp of finnish sauna: 80&deg;C (176&deg;F)">‚ô®Ô∏è</span>
<strong>HOT TIP</strong> You can define <code>columnSettings</code> in the <code>&lt;script&gt;</code> tag of your <code>.svelte</code>
	file, or in a separate <code>.ts</code> file as demonstrated here. If your table has a large number of columns,
	moving it to its own file will make your <code>.svelte</code> file easier to digest visually and make your component
	easier to maintain (IMO).
</blockquote>

<h3 id="tableSettings"><code>tableSettings</code></h3>

Strictly speaking, the final prop, `tableSettings`, isn't required. Without it, our table would be rendered like this:

![Table that would be rendered with all default settings](./readme_default_settings.png)

That's a very nice table, I'm sure you will agree. However, by customizing the `tableSettings` prop, the same `data` and `columnSettings` can produce the table below:

![Table that would be rendered by adjusting the default settings](./readme_custom_settings.png)

Now that's a table that you can be proud of! The `tableSettings` object specified at the beginning of this README will produce these changes. The `TableSettings` interface exposes the following configuration settings:

| Property                    | Type               | Required | Default                                        | Description                                                                                                                                                                                                                                           |
| --------------------------- | ------------------ | -------- | ---------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `tableId`                   | `string`           | ‚ùå       | Randomly generated ID (e.g., `table-79f3e496`) | This is the `id`¬†attribute of the table HTML element                                                                                                                                                                                                  |
| `themeName`                 | `TableTheme`       | ‚ùå       | `'lighter'`                                    | `themeName`is a string literal type = `'light'` \| `'lighter'`¬†\| `'dark'`¬†\| `'darker'`¬†\| `'custom‚Äô`. You can check out all of the themes in the interactive docs.                                                                                  |
| `showHeader`                | `boolean`          | ‚ùå       | `false`                                        | Display the¬†¬†`header`value above the table (**#1 in the disgram below**)                                                                                                                                                                              |
| `header`                    | `string`           | ‚ùå       | `''` (empty string)                            | Table header/caption/title to display above the table                                                                                                                                                                                                 |
| `showSortDescription`       | `boolean`          | ‚ùå       | `false`                                        | Display the sort column and sort direction currently applied (**#2 in the diagram below**)                                                                                                                                                            |
| `sortBy`                    | `string`           | ‚ùå       | `null`                                         | `propName`¬†of the column to sort the table by. If not specified, no sorting behavior will be applied when component is loaded. (**#3 in the diagram below**)                                                                                          |
| `sortDir`                   | `SortDirection`    | ‚ùå       | `'asc'`                                        | `SortDirection`¬†is a string literal type = `asc`¬†or `desc`. Determines if the sort behavior is applied in ascending or descending order.                                                                                                              |
| `tableWrapper`              | `boolean`          | ‚ùå       | `false`                                        | Display a border around the table (**#4 in the diagram below**)                                                                                                                                                                                       |
| `expandToContainerWidth` üíé | `boolean`          | ‚ùå       | `false`                                        | If the table width is smaller than the containing element, expand the wrapper/pagination sections to fill the container.                                                                                                 |
| `clickableRows` üéÅ          | `boolean`          | ‚ùå       | `false`                                        | The `rowClicked` event is raised when any row in the body of the table is clicked. The event contains the row data as an object of type `T`.                                                                                                          |
| `animateSorting` üéÅ         | `boolean`          | ‚ùå       | `false`                                        | Changes in row order are reflected as a flip animation when the sort behavior is changed (e.g., by clicking on a column header)                                                                                                                       |
| `paginated`                 | `boolean`          | ‚ùå       | `false`                                        | Enables pagination. If `false`, all rows are displayed.                                                                                                                                                                                               |
| `pageSize`                  | `number`           | ‚ùå       | `5`                                            | _(If paginated)_ Number of rows to display per page. Must be one of the options in `pageSizeOptions`.                                                                                                                                                 |
| `pageSizeOptions`           | `number[]`         | ‚ùå       | `[5, 10, 15]`                                  | _(If paginated)_ Array of possible page sizes, user can switch between page sizes at any time.                                                                                                                                                        |
| `pageRangeFormat`           | `PageRangeFormat`  | ‚ùå       | `'auto'`                                       | _(If paginated)_ `PageRangeFormat` is a string literal type = `'none'` \| `'compact'` \| `'verbose'` \| `'auto'`. See interactive docs for examples.                                                                                                  |
| `pageNavFormat`             | `PaginationLayout` | ‚ùå       | `'auto'`                                       | _(If paginated)_ `PaginationLayout` is a string literal type = `'compact'` \| `'full'` \| `'auto'`. See interactive docs for examples.                                                                                                                |
| `rowType`                   | `string`           | ‚ùå       | `'rows'`                                       | _(If paginated)_ Since the page range description in verbose mode displays as 'XX-YY of ZZ total _rowType_' you can customize the term used to dsescribe the tabular data (e.g., '1-10 of 21 _patients_' or '6-10 of 21 _vax records_' in our table). |

<blockquote>
  		<span class="emoji" title="version 0.0.16 features">üéÅ</span><span class="released-in-version">Released in 0.0.16</span>
		<br/>
		<span class="emoji" title="version 0.0.26 features">üíé</span><span class="released-in-version">Released in 0.0.26</span>
</blockquote>

<blockquote>
	<span class="emoji" title="stop calling me 'chief'">üò≤</span><strong>LISTEN UP, CHIEF:</strong> As explained
	above, the <code>tableId</code> prop is used as the <code>id</code> attribute of the table HTML
	element. Therefore, it is very important that you treat this value as a unique identifier, per
	HTML requirements. If you choose to provide your own value for <code>tableId</code> , it is
	extremely important that you do not reuse this value for another <code>SimpleTable</code> component,
	or any HTML element in your project. Bad things will happen, trust me!
</blockquote>

![Image that shows where and how various table settings change the appearance of the rendered table](./readme_settings_explained.png)

<h2 id="themes">Themes</h2>

<h3 id="css-custom-properties">CSS Custom Properties</h3>

The following CSS custom properties can be applied either at the `body` element (if you want all tables throughout your site to use a single, uniform theme) or can be applied individually to each table. Detailed instructions and an interactive theme editor is a WIP, will be available ASAP:

<Highlight language={css} code={themeCSSVariables()} />

<style lang="postcss">
  :global(body) {
		background-color: var(--black1);
	  color: var(--white1);
	  line-height: 1.6em;
	}

	a,
	a:visited {
    color: var(--white1);
    box-shadow: inset 0 -3.5px 0 var(--blue-green2);
    text-decoration: none;
	}

	a:hover,
	a:active,
	a:focus {
    color: var(--black1);
    background-color: var(--blue-green3);
    text-decoration: none;
    padding-top: 2px;
    padding-bottom: 0;
    border-bottom: none;
    transition: background-color, color 350ms ease-out;
    box-shadow: none;
	}
	
	a:hover,
	a:active {
	  outline: 0;
	}

	::-moz-selection {
	  background: var(--dark-gray2);
	}

	::selection {
	  background: var(--dark-gray2);
	}

	a::-moz-selection {
	  background: rgba(255, 255, 0, 0.3);
	  color: #000000;
	}

	a::selection {
	  background: rgba(255, 255, 0, 0.3);
	  color: #000000;
	}

	p {
	  margin: 1em 0;
		font-weight: 300;
	}

	img {
	  max-width: 100%;
	}

	h1,
	h2,
	h3 {
	  font-weight: 500;
	  color: var(--white1);
	  line-height: 1em;
		margin: 2.5rem 0 0.75rem 0;
	}

	h1 {
	  font-size: 2em;
	}

	h2 {
	  font-size: 1.7em;
	}

	h3 {
	  font-size: 1.5em;
	}

	h4 {
	  font-size: 1.3em;
	}

	blockquote {
	  color: var(--light-gray4);
	  margin: 2rem 0;
	  padding: 0.5rem;
	  border-left: 0.25em var(--blue-green2) solid;
		background-color: var(--black2);
	}
	
	blockquote.important {
	  border-left: 0.25em var(--red2) solid;
	}
  .released-in-version {
    font-style: italic;
    color: var(--light-gray4);
  }
	
	blockquote strong,
  blockquote span {
		margin: 0 0.35rem;
		color: var(--white4);
	}

	code {
	  color: var(--blue-green2);
		background-color: var(--dark-gray4);
    font-weight: 300;
	  font-family: monospace, monospace;
	  font-size: 0.85em;
		line-height: 1.6;
		padding: 0.2rem 0.2rem;
		border-radius: 4px;
	}

	:global(code.hljs) {
		font-size: 0.8rem;
    border-radius: 6px;
	}

	strong {
	  font-weight: bold;
	}

	ul {
		font-weight: 300;
	  margin: 1em 0;
	  padding: 0 0 0 2em;
		list-style: disc;
	}
	
	ul li {
		margin: 0.25rem 0;
	}
	
	ul strong {
		color: var(--light-gray1);
		font-weight: 700;
	}

	img {
	  border: 0;
	  -ms-interpolation-mode: bicubic;
	  vertical-align: middle;
	}

	:global(table) {
		font-size: 0.9rem;
	  border-collapse: collapse;
	  border-spacing: 0;
		color: var(--light-gray2);
	}
	
	:global(table tr) {
    background-color: var(--black3);
    border-top: 1px solid var(--gray4);
	}

	:global(table th),
	:global(table td) {
	  vertical-align: top;
    padding: 6px 13px;
    border: 1px solid var(--gray4);
	}

  :global(td em) {
    color: var(--yellow3);
    font-weight: 300;
  }
	
	.toc {
		font-size: 1.1rem;
		list-style: disc;
		color: var(--blue-green2);
		padding: 0 0 0 2rem;
		font-weight: 400;
		white-space: nowrap;
		width: min-content;
		background-color: hsla(var(--b3) / var(--tw-bg-opacity));
		border: var(--blue-green2);
		margin: 2rem 0 0 0;
	}
	
	.toc a,
	.toc a:focus,
	.toc a:active {
		color: var(--blue-green2);
		background-color: var(--black1);
		padding: 0;
		transition: none;
		box-shadow: none;
	}
	
	.toc a:hover {
		color: var(--blue-green3);
		background-color: var(--black1);
		padding: 0;
		transition: none;
		box-shadow: none;
	}
	
  .toc ul {
    margin: 0;
		font-weight: 400;
  }
	
	.badges {
		display: flex;
		flex-flow: row wrap;
		justify-content: flex-start;
    box-shadoww: none;
	}
  
  .badges > img,
	.badges > a,
	.badges > a:hover,
	.badges > a:active {
    width: auto;
    display: inline-block;
    margin: 0.25rem;
		padding: 0;
		background-color: transparent;
    box-shadoww: none;
  }
	
	.flex-header {
	  margin: 2.5rem 0 0.75rem 0;
	}
	
	.flex-header h2 {
		margin: 0
	}
	
	.flex-header .emoji {
		margin: auto 1rem auto 0;
	}
	
	.examples {
		font-size: 1.3rem;
		line-height: 1.5;
	}
	
	.coming-soon {
		font-style: italic;
		color: var(--gray1);
	}

	@media print {
	  * {
	    background: transparent !important;
	    color: black !important;
	    filter: none !important;
	    -ms-filter: none !important;
	  }

	  a,
	  a:visited {
	    text-decoration: underline;
	  }

	  a[href]:after {
	    content: " (" attr(href) ")";
	  }

	  a[href^="#"]:after {
	    content: "";
	  }

	  blockquote {
	    border: 1px solid #999;
	    padding-right: 1em;
	    page-break-inside: avoid;
	  }

	  tr,
	  img {
	    page-break-inside: avoid;
	  }

	  img {
	    max-width: 100% !important;
	  }

	  @page :left {
	    margin: 15mm 20mm 15mm 10mm;
	  }

	  @page :right {
	    margin: 15mm 10mm 15mm 20mm;
	  }

	  p,
	  h2,
	  h3 {
	    orphans: 3;
	    widows: 3;
	  }

	  h2,
	  h3 {
	    page-break-after: avoid;
	  }
	}
</style>
